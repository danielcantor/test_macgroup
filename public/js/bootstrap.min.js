/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/bootstrap.min.js":
/*!***************************************!*\
  !*** ./resources/js/bootstrap.min.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n  * Bootstrap v5.0.0-beta2 (https://getbootstrap.com/)\n  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n!function (t, e) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? module.exports = e(__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@popperjs/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()))) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@popperjs/core'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function (t) {\n  \"use strict\";\n\n  function e(t) {\n    if (t && t.__esModule) return t;\n    var e = Object.create(null);\n    return t && Object.keys(t).forEach(function (n) {\n      if (\"default\" !== n) {\n        var i = Object.getOwnPropertyDescriptor(t, n);\n        Object.defineProperty(e, n, i.get ? i : {\n          enumerable: !0,\n          get: function get() {\n            return t[n];\n          }\n        });\n      }\n    }), e[\"default\"] = t, Object.freeze(e);\n  }\n\n  var n = e(t);\n\n  function i(t, e) {\n    for (var n = 0; n < e.length; n++) {\n      var i = e[n];\n      i.enumerable = i.enumerable || !1, i.configurable = !0, \"value\" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);\n    }\n  }\n\n  function o(t, e, n) {\n    return e && i(t.prototype, e), n && i(t, n), t;\n  }\n\n  function s() {\n    return (s = Object.assign || function (t) {\n      for (var e = 1; e < arguments.length; e++) {\n        var n = arguments[e];\n\n        for (var i in n) {\n          Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);\n        }\n      }\n\n      return t;\n    }).apply(this, arguments);\n  }\n\n  function r(t, e) {\n    var n, i;\n    t.prototype = Object.create(e.prototype), t.prototype.constructor = t, n = t, i = e, (Object.setPrototypeOf || function (t, e) {\n      return t.__proto__ = e, t;\n    })(n, i);\n  }\n\n  var a,\n      l,\n      c = function c(t) {\n    do {\n      t += Math.floor(1e6 * Math.random());\n    } while (document.getElementById(t));\n\n    return t;\n  },\n      u = function u(t) {\n    var e = t.getAttribute(\"data-bs-target\");\n\n    if (!e || \"#\" === e) {\n      var n = t.getAttribute(\"href\");\n      if (!n || !n.includes(\"#\") && !n.startsWith(\".\")) return null;\n      n.includes(\"#\") && !n.startsWith(\"#\") && (n = \"#\" + n.split(\"#\")[1]), e = n && \"#\" !== n ? n.trim() : null;\n    }\n\n    return e;\n  },\n      h = function h(t) {\n    var e = u(t);\n    return e && document.querySelector(e) ? e : null;\n  },\n      d = function d(t) {\n    var e = u(t);\n    return e ? document.querySelector(e) : null;\n  },\n      f = function f(t) {\n    if (!t) return 0;\n    var e = window.getComputedStyle(t),\n        n = e.transitionDuration,\n        i = e.transitionDelay,\n        o = Number.parseFloat(n),\n        s = Number.parseFloat(i);\n    return o || s ? (n = n.split(\",\")[0], i = i.split(\",\")[0], 1e3 * (Number.parseFloat(n) + Number.parseFloat(i))) : 0;\n  },\n      p = function p(t) {\n    t.dispatchEvent(new Event(\"transitionend\"));\n  },\n      g = function g(t) {\n    return (t[0] || t).nodeType;\n  },\n      m = function m(t, e) {\n    var n = !1,\n        i = e + 5;\n    t.addEventListener(\"transitionend\", function e() {\n      n = !0, t.removeEventListener(\"transitionend\", e);\n    }), setTimeout(function () {\n      n || p(t);\n    }, i);\n  },\n      _ = function _(t, e, n) {\n    Object.keys(n).forEach(function (i) {\n      var o,\n          s = n[i],\n          r = e[i],\n          a = r && g(r) ? \"element\" : null == (o = r) ? \"\" + o : {}.toString.call(o).match(/\\s([a-z]+)/i)[1].toLowerCase();\n      if (!new RegExp(s).test(a)) throw new TypeError(t.toUpperCase() + ': Option \"' + i + '\" provided type \"' + a + '\" but expected type \"' + s + '\".');\n    });\n  },\n      v = function v(t) {\n    if (!t) return !1;\n\n    if (t.style && t.parentNode && t.parentNode.style) {\n      var e = getComputedStyle(t),\n          n = getComputedStyle(t.parentNode);\n      return \"none\" !== e.display && \"none\" !== n.display && \"hidden\" !== e.visibility;\n    }\n\n    return !1;\n  },\n      b = function b() {\n    return function () {};\n  },\n      y = function y(t) {\n    return t.offsetHeight;\n  },\n      w = function w() {\n    var t = window.jQuery;\n    return t && !document.body.hasAttribute(\"data-bs-no-jquery\") ? t : null;\n  },\n      E = \"rtl\" === document.documentElement.dir,\n      T = function T(t, e) {\n    var n;\n    n = function n() {\n      var n = w();\n\n      if (n) {\n        var i = n.fn[t];\n        n.fn[t] = e.jQueryInterface, n.fn[t].Constructor = e, n.fn[t].noConflict = function () {\n          return n.fn[t] = i, e.jQueryInterface;\n        };\n      }\n    }, \"loading\" === document.readyState ? document.addEventListener(\"DOMContentLoaded\", n) : n();\n  },\n      A = (a = {}, l = 1, {\n    set: function set(t, e, n) {\n      void 0 === t.bsKey && (t.bsKey = {\n        key: e,\n        id: l\n      }, l++), a[t.bsKey.id] = n;\n    },\n    get: function get(t, e) {\n      if (!t || void 0 === t.bsKey) return null;\n      var n = t.bsKey;\n      return n.key === e ? a[n.id] : null;\n    },\n    \"delete\": function _delete(t, e) {\n      if (void 0 !== t.bsKey) {\n        var n = t.bsKey;\n        n.key === e && (delete a[n.id], delete t.bsKey);\n      }\n    }\n  }),\n      k = function k(t, e, n) {\n    A.set(t, e, n);\n  },\n      L = function L(t, e) {\n    return A.get(t, e);\n  },\n      C = /[^.]*(?=\\..*)\\.|.*/,\n      D = /\\..*/,\n      S = /::\\d+$/,\n      N = {},\n      O = 1,\n      I = {\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n  },\n      j = new Set([\"click\", \"dblclick\", \"mouseup\", \"mousedown\", \"contextmenu\", \"mousewheel\", \"DOMMouseScroll\", \"mouseover\", \"mouseout\", \"mousemove\", \"selectstart\", \"selectend\", \"keydown\", \"keypress\", \"keyup\", \"orientationchange\", \"touchstart\", \"touchmove\", \"touchend\", \"touchcancel\", \"pointerdown\", \"pointermove\", \"pointerup\", \"pointerleave\", \"pointercancel\", \"gesturestart\", \"gesturechange\", \"gestureend\", \"focus\", \"blur\", \"change\", \"reset\", \"select\", \"submit\", \"focusin\", \"focusout\", \"load\", \"unload\", \"beforeunload\", \"resize\", \"move\", \"DOMContentLoaded\", \"readystatechange\", \"error\", \"abort\", \"scroll\"]);\n\n  function P(t, e) {\n    return e && e + \"::\" + O++ || t.uidEvent || O++;\n  }\n\n  function x(t) {\n    var e = P(t);\n    return t.uidEvent = e, N[e] = N[e] || {}, N[e];\n  }\n\n  function H(t, e, n) {\n    void 0 === n && (n = null);\n\n    for (var i = Object.keys(t), o = 0, s = i.length; o < s; o++) {\n      var r = t[i[o]];\n      if (r.originalHandler === e && r.delegationSelector === n) return r;\n    }\n\n    return null;\n  }\n\n  function B(t, e, n) {\n    var i = \"string\" == typeof e,\n        o = i ? n : e,\n        s = t.replace(D, \"\"),\n        r = I[s];\n    return r && (s = r), j.has(s) || (s = t), [i, o, s];\n  }\n\n  function M(t, e, n, i, o) {\n    if (\"string\" == typeof e && t) {\n      n || (n = i, i = null);\n      var s = B(e, n, i),\n          r = s[0],\n          a = s[1],\n          l = s[2],\n          c = x(t),\n          u = c[l] || (c[l] = {}),\n          h = H(u, a, r ? n : null);\n      if (h) h.oneOff = h.oneOff && o;else {\n        var d = P(a, e.replace(C, \"\")),\n            f = r ? function (t, e, n) {\n          return function i(o) {\n            for (var s = t.querySelectorAll(e), r = o.target; r && r !== this; r = r.parentNode) {\n              for (var a = s.length; a--;) {\n                if (s[a] === r) return o.delegateTarget = r, i.oneOff && K.off(t, o.type, n), n.apply(r, [o]);\n              }\n            }\n\n            return null;\n          };\n        }(t, n, i) : function (t, e) {\n          return function n(i) {\n            return i.delegateTarget = t, n.oneOff && K.off(t, i.type, e), e.apply(t, [i]);\n          };\n        }(t, n);\n        f.delegationSelector = r ? n : null, f.originalHandler = a, f.oneOff = o, f.uidEvent = d, u[d] = f, t.addEventListener(l, f, r);\n      }\n    }\n  }\n\n  function R(t, e, n, i, o) {\n    var s = H(e[n], i, o);\n    s && (t.removeEventListener(n, s, Boolean(o)), delete e[n][s.uidEvent]);\n  }\n\n  var K = {\n    on: function on(t, e, n, i) {\n      M(t, e, n, i, !1);\n    },\n    one: function one(t, e, n, i) {\n      M(t, e, n, i, !0);\n    },\n    off: function off(t, e, n, i) {\n      if (\"string\" == typeof e && t) {\n        var o = B(e, n, i),\n            s = o[0],\n            r = o[1],\n            a = o[2],\n            l = a !== e,\n            c = x(t),\n            u = e.startsWith(\".\");\n\n        if (void 0 === r) {\n          u && Object.keys(c).forEach(function (n) {\n            !function (t, e, n, i) {\n              var o = e[n] || {};\n              Object.keys(o).forEach(function (s) {\n                if (s.includes(i)) {\n                  var r = o[s];\n                  R(t, e, n, r.originalHandler, r.delegationSelector);\n                }\n              });\n            }(t, c, n, e.slice(1));\n          });\n          var h = c[a] || {};\n          Object.keys(h).forEach(function (n) {\n            var i = n.replace(S, \"\");\n\n            if (!l || e.includes(i)) {\n              var o = h[n];\n              R(t, c, a, o.originalHandler, o.delegationSelector);\n            }\n          });\n        } else {\n          if (!c || !c[a]) return;\n          R(t, c, a, r, s ? n : null);\n        }\n      }\n    },\n    trigger: function trigger(t, e, n) {\n      if (\"string\" != typeof e || !t) return null;\n      var i,\n          o = w(),\n          s = e.replace(D, \"\"),\n          r = e !== s,\n          a = j.has(s),\n          l = !0,\n          c = !0,\n          u = !1,\n          h = null;\n      return r && o && (i = o.Event(e, n), o(t).trigger(i), l = !i.isPropagationStopped(), c = !i.isImmediatePropagationStopped(), u = i.isDefaultPrevented()), a ? (h = document.createEvent(\"HTMLEvents\")).initEvent(s, l, !0) : h = new CustomEvent(e, {\n        bubbles: l,\n        cancelable: !0\n      }), void 0 !== n && Object.keys(n).forEach(function (t) {\n        Object.defineProperty(h, t, {\n          get: function get() {\n            return n[t];\n          }\n        });\n      }), u && h.preventDefault(), c && t.dispatchEvent(h), h.defaultPrevented && void 0 !== i && i.preventDefault(), h;\n    }\n  },\n      W = function () {\n    function t(t) {\n      t && (this._element = t, k(t, this.constructor.DATA_KEY, this));\n    }\n\n    return t.prototype.dispose = function () {\n      var t, e;\n      t = this._element, e = this.constructor.DATA_KEY, A[\"delete\"](t, e), this._element = null;\n    }, t.getInstance = function (t) {\n      return L(t, this.DATA_KEY);\n    }, o(t, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return \"5.0.0-beta2\";\n      }\n    }]), t;\n  }(),\n      U = function (t) {\n    function e() {\n      return t.apply(this, arguments) || this;\n    }\n\n    r(e, t);\n    var n = e.prototype;\n    return n.close = function (t) {\n      var e = t ? this._getRootElement(t) : this._element,\n          n = this._triggerCloseEvent(e);\n\n      null === n || n.defaultPrevented || this._removeElement(e);\n    }, n._getRootElement = function (t) {\n      return d(t) || t.closest(\".alert\");\n    }, n._triggerCloseEvent = function (t) {\n      return K.trigger(t, \"close.bs.alert\");\n    }, n._removeElement = function (t) {\n      var e = this;\n\n      if (t.classList.remove(\"show\"), t.classList.contains(\"fade\")) {\n        var n = f(t);\n        K.one(t, \"transitionend\", function () {\n          return e._destroyElement(t);\n        }), m(t, n);\n      } else this._destroyElement(t);\n    }, n._destroyElement = function (t) {\n      t.parentNode && t.parentNode.removeChild(t), K.trigger(t, \"closed.bs.alert\");\n    }, e.jQueryInterface = function (t) {\n      return this.each(function () {\n        var n = L(this, \"bs.alert\");\n        n || (n = new e(this)), \"close\" === t && n[t](this);\n      });\n    }, e.handleDismiss = function (t) {\n      return function (e) {\n        e && e.preventDefault(), t.close(this);\n      };\n    }, o(e, null, [{\n      key: \"DATA_KEY\",\n      get: function get() {\n        return \"bs.alert\";\n      }\n    }]), e;\n  }(W);\n\n  K.on(document, \"click.bs.alert.data-api\", '[data-bs-dismiss=\"alert\"]', U.handleDismiss(new U())), T(\"alert\", U);\n\n  var F = function (t) {\n    function e() {\n      return t.apply(this, arguments) || this;\n    }\n\n    return r(e, t), e.prototype.toggle = function () {\n      this._element.setAttribute(\"aria-pressed\", this._element.classList.toggle(\"active\"));\n    }, e.jQueryInterface = function (t) {\n      return this.each(function () {\n        var n = L(this, \"bs.button\");\n        n || (n = new e(this)), \"toggle\" === t && n[t]();\n      });\n    }, o(e, null, [{\n      key: \"DATA_KEY\",\n      get: function get() {\n        return \"bs.button\";\n      }\n    }]), e;\n  }(W);\n\n  function z(t) {\n    return \"true\" === t || \"false\" !== t && (t === Number(t).toString() ? Number(t) : \"\" === t || \"null\" === t ? null : t);\n  }\n\n  function Y(t) {\n    return t.replace(/[A-Z]/g, function (t) {\n      return \"-\" + t.toLowerCase();\n    });\n  }\n\n  K.on(document, \"click.bs.button.data-api\", '[data-bs-toggle=\"button\"]', function (t) {\n    t.preventDefault();\n    var e = t.target.closest('[data-bs-toggle=\"button\"]'),\n        n = L(e, \"bs.button\");\n    n || (n = new F(e)), n.toggle();\n  }), T(\"button\", F);\n\n  var X = {\n    setDataAttribute: function setDataAttribute(t, e, n) {\n      t.setAttribute(\"data-bs-\" + Y(e), n);\n    },\n    removeDataAttribute: function removeDataAttribute(t, e) {\n      t.removeAttribute(\"data-bs-\" + Y(e));\n    },\n    getDataAttributes: function getDataAttributes(t) {\n      if (!t) return {};\n      var e = {};\n      return Object.keys(t.dataset).filter(function (t) {\n        return t.startsWith(\"bs\");\n      }).forEach(function (n) {\n        var i = n.replace(/^bs/, \"\");\n        i = i.charAt(0).toLowerCase() + i.slice(1, i.length), e[i] = z(t.dataset[n]);\n      }), e;\n    },\n    getDataAttribute: function getDataAttribute(t, e) {\n      return z(t.getAttribute(\"data-bs-\" + Y(e)));\n    },\n    offset: function offset(t) {\n      var e = t.getBoundingClientRect();\n      return {\n        top: e.top + document.body.scrollTop,\n        left: e.left + document.body.scrollLeft\n      };\n    },\n    position: function position(t) {\n      return {\n        top: t.offsetTop,\n        left: t.offsetLeft\n      };\n    }\n  },\n      q = function q(t, e) {\n    var n;\n    return void 0 === e && (e = document.documentElement), (n = []).concat.apply(n, Element.prototype.querySelectorAll.call(e, t));\n  },\n      Q = function Q(t, e) {\n    return void 0 === e && (e = document.documentElement), Element.prototype.querySelector.call(e, t);\n  },\n      V = function V(t, e) {\n    var n;\n    return (n = []).concat.apply(n, t.children).filter(function (t) {\n      return t.matches(e);\n    });\n  },\n      $ = function $(t, e) {\n    for (var n = t.previousElementSibling; n;) {\n      if (n.matches(e)) return [n];\n      n = n.previousElementSibling;\n    }\n\n    return [];\n  },\n      G = {\n    interval: 5e3,\n    keyboard: !0,\n    slide: !1,\n    pause: \"hover\",\n    wrap: !0,\n    touch: !0\n  },\n      Z = {\n    interval: \"(number|boolean)\",\n    keyboard: \"boolean\",\n    slide: \"(boolean|string)\",\n    pause: \"(string|boolean)\",\n    wrap: \"boolean\",\n    touch: \"boolean\"\n  },\n      J = function (t) {\n    function e(e, n) {\n      var i;\n      return (i = t.call(this, e) || this)._items = null, i._interval = null, i._activeElement = null, i._isPaused = !1, i._isSliding = !1, i.touchTimeout = null, i.touchStartX = 0, i.touchDeltaX = 0, i._config = i._getConfig(n), i._indicatorsElement = Q(\".carousel-indicators\", i._element), i._touchSupported = \"ontouchstart\" in document.documentElement || navigator.maxTouchPoints > 0, i._pointerEvent = Boolean(window.PointerEvent), i._addEventListeners(), i;\n    }\n\n    r(e, t);\n    var n = e.prototype;\n    return n.next = function () {\n      this._isSliding || this._slide(\"next\");\n    }, n.nextWhenVisible = function () {\n      !document.hidden && v(this._element) && this.next();\n    }, n.prev = function () {\n      this._isSliding || this._slide(\"prev\");\n    }, n.pause = function (t) {\n      t || (this._isPaused = !0), Q(\".carousel-item-next, .carousel-item-prev\", this._element) && (p(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;\n    }, n.cycle = function (t) {\n      t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config && this._config.interval && !this._isPaused && (this._updateInterval(), this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));\n    }, n.to = function (t) {\n      var e = this;\n      this._activeElement = Q(\".active.carousel-item\", this._element);\n\n      var n = this._getItemIndex(this._activeElement);\n\n      if (!(t > this._items.length - 1 || t < 0)) if (this._isSliding) K.one(this._element, \"slid.bs.carousel\", function () {\n        return e.to(t);\n      });else {\n        if (n === t) return this.pause(), void this.cycle();\n        var i = t > n ? \"next\" : \"prev\";\n\n        this._slide(i, this._items[t]);\n      }\n    }, n.dispose = function () {\n      t.prototype.dispose.call(this), K.off(this._element, \".bs.carousel\"), this._items = null, this._config = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null;\n    }, n._getConfig = function (t) {\n      return t = s({}, G, t), _(\"carousel\", t, Z), t;\n    }, n._handleSwipe = function () {\n      var t = Math.abs(this.touchDeltaX);\n\n      if (!(t <= 40)) {\n        var e = t / this.touchDeltaX;\n        this.touchDeltaX = 0, e > 0 && (E ? this.next() : this.prev()), e < 0 && (E ? this.prev() : this.next());\n      }\n    }, n._addEventListeners = function () {\n      var t = this;\n      this._config.keyboard && K.on(this._element, \"keydown.bs.carousel\", function (e) {\n        return t._keydown(e);\n      }), \"hover\" === this._config.pause && (K.on(this._element, \"mouseenter.bs.carousel\", function (e) {\n        return t.pause(e);\n      }), K.on(this._element, \"mouseleave.bs.carousel\", function (e) {\n        return t.cycle(e);\n      })), this._config.touch && this._touchSupported && this._addTouchEventListeners();\n    }, n._addTouchEventListeners = function () {\n      var t = this,\n          e = function e(_e) {\n        !t._pointerEvent || \"pen\" !== _e.pointerType && \"touch\" !== _e.pointerType ? t._pointerEvent || (t.touchStartX = _e.touches[0].clientX) : t.touchStartX = _e.clientX;\n      },\n          n = function n(e) {\n        !t._pointerEvent || \"pen\" !== e.pointerType && \"touch\" !== e.pointerType || (t.touchDeltaX = e.clientX - t.touchStartX), t._handleSwipe(), \"hover\" === t._config.pause && (t.pause(), t.touchTimeout && clearTimeout(t.touchTimeout), t.touchTimeout = setTimeout(function (e) {\n          return t.cycle(e);\n        }, 500 + t._config.interval));\n      };\n\n      q(\".carousel-item img\", this._element).forEach(function (t) {\n        K.on(t, \"dragstart.bs.carousel\", function (t) {\n          return t.preventDefault();\n        });\n      }), this._pointerEvent ? (K.on(this._element, \"pointerdown.bs.carousel\", function (t) {\n        return e(t);\n      }), K.on(this._element, \"pointerup.bs.carousel\", function (t) {\n        return n(t);\n      }), this._element.classList.add(\"pointer-event\")) : (K.on(this._element, \"touchstart.bs.carousel\", function (t) {\n        return e(t);\n      }), K.on(this._element, \"touchmove.bs.carousel\", function (e) {\n        return function (e) {\n          e.touches && e.touches.length > 1 ? t.touchDeltaX = 0 : t.touchDeltaX = e.touches[0].clientX - t.touchStartX;\n        }(e);\n      }), K.on(this._element, \"touchend.bs.carousel\", function (t) {\n        return n(t);\n      }));\n    }, n._keydown = function (t) {\n      /input|textarea/i.test(t.target.tagName) || (\"ArrowLeft\" === t.key ? (t.preventDefault(), E ? this.next() : this.prev()) : \"ArrowRight\" === t.key && (t.preventDefault(), E ? this.prev() : this.next()));\n    }, n._getItemIndex = function (t) {\n      return this._items = t && t.parentNode ? q(\".carousel-item\", t.parentNode) : [], this._items.indexOf(t);\n    }, n._getItemByDirection = function (t, e) {\n      var n = \"next\" === t,\n          i = \"prev\" === t,\n          o = this._getItemIndex(e),\n          s = this._items.length - 1;\n\n      if ((i && 0 === o || n && o === s) && !this._config.wrap) return e;\n      var r = (o + (\"prev\" === t ? -1 : 1)) % this._items.length;\n      return -1 === r ? this._items[this._items.length - 1] : this._items[r];\n    }, n._triggerSlideEvent = function (t, e) {\n      var n = this._getItemIndex(t),\n          i = this._getItemIndex(Q(\".active.carousel-item\", this._element));\n\n      return K.trigger(this._element, \"slide.bs.carousel\", {\n        relatedTarget: t,\n        direction: e,\n        from: i,\n        to: n\n      });\n    }, n._setActiveIndicatorElement = function (t) {\n      if (this._indicatorsElement) {\n        var e = Q(\".active\", this._indicatorsElement);\n        e.classList.remove(\"active\"), e.removeAttribute(\"aria-current\");\n\n        for (var n = q(\"[data-bs-target]\", this._indicatorsElement), i = 0; i < n.length; i++) {\n          if (Number.parseInt(n[i].getAttribute(\"data-bs-slide-to\"), 10) === this._getItemIndex(t)) {\n            n[i].classList.add(\"active\"), n[i].setAttribute(\"aria-current\", \"true\");\n            break;\n          }\n        }\n      }\n    }, n._updateInterval = function () {\n      var t = this._activeElement || Q(\".active.carousel-item\", this._element);\n\n      if (t) {\n        var e = Number.parseInt(t.getAttribute(\"data-bs-interval\"), 10);\n        e ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, this._config.interval = e) : this._config.interval = this._config.defaultInterval || this._config.interval;\n      }\n    }, n._slide = function (t, e) {\n      var n = this,\n          i = Q(\".active.carousel-item\", this._element),\n          o = this._getItemIndex(i),\n          s = e || i && this._getItemByDirection(t, i),\n          r = this._getItemIndex(s),\n          a = Boolean(this._interval),\n          l = \"next\" === t ? \"carousel-item-start\" : \"carousel-item-end\",\n          c = \"next\" === t ? \"carousel-item-next\" : \"carousel-item-prev\",\n          u = \"next\" === t ? \"left\" : \"right\";\n\n      if (s && s.classList.contains(\"active\")) this._isSliding = !1;else if (!this._triggerSlideEvent(s, u).defaultPrevented && i && s) {\n        if (this._isSliding = !0, a && this.pause(), this._setActiveIndicatorElement(s), this._activeElement = s, this._element.classList.contains(\"slide\")) {\n          s.classList.add(c), y(s), i.classList.add(l), s.classList.add(l);\n          var h = f(i);\n          K.one(i, \"transitionend\", function () {\n            s.classList.remove(l, c), s.classList.add(\"active\"), i.classList.remove(\"active\", c, l), n._isSliding = !1, setTimeout(function () {\n              K.trigger(n._element, \"slid.bs.carousel\", {\n                relatedTarget: s,\n                direction: u,\n                from: o,\n                to: r\n              });\n            }, 0);\n          }), m(i, h);\n        } else i.classList.remove(\"active\"), s.classList.add(\"active\"), this._isSliding = !1, K.trigger(this._element, \"slid.bs.carousel\", {\n          relatedTarget: s,\n          direction: u,\n          from: o,\n          to: r\n        });\n\n        a && this.cycle();\n      }\n    }, e.carouselInterface = function (t, n) {\n      var i = L(t, \"bs.carousel\"),\n          o = s({}, G, X.getDataAttributes(t));\n      \"object\" == _typeof(n) && (o = s({}, o, n));\n      var r = \"string\" == typeof n ? n : o.slide;\n      if (i || (i = new e(t, o)), \"number\" == typeof n) i.to(n);else if (\"string\" == typeof r) {\n        if (void 0 === i[r]) throw new TypeError('No method named \"' + r + '\"');\n        i[r]();\n      } else o.interval && o.ride && (i.pause(), i.cycle());\n    }, e.jQueryInterface = function (t) {\n      return this.each(function () {\n        e.carouselInterface(this, t);\n      });\n    }, e.dataApiClickHandler = function (t) {\n      var n = d(this);\n\n      if (n && n.classList.contains(\"carousel\")) {\n        var i = s({}, X.getDataAttributes(n), X.getDataAttributes(this)),\n            o = this.getAttribute(\"data-bs-slide-to\");\n        o && (i.interval = !1), e.carouselInterface(n, i), o && L(n, \"bs.carousel\").to(o), t.preventDefault();\n      }\n    }, o(e, null, [{\n      key: \"Default\",\n      get: function get() {\n        return G;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return \"bs.carousel\";\n      }\n    }]), e;\n  }(W);\n\n  K.on(document, \"click.bs.carousel.data-api\", \"[data-bs-slide], [data-bs-slide-to]\", J.dataApiClickHandler), K.on(window, \"load.bs.carousel.data-api\", function () {\n    for (var t = q('[data-bs-ride=\"carousel\"]'), e = 0, n = t.length; e < n; e++) {\n      J.carouselInterface(t[e], L(t[e], \"bs.carousel\"));\n    }\n  }), T(\"carousel\", J);\n\n  var tt = {\n    toggle: !0,\n    parent: \"\"\n  },\n      et = {\n    toggle: \"boolean\",\n    parent: \"(string|element)\"\n  },\n      nt = function (t) {\n    function e(e, n) {\n      var i;\n      (i = t.call(this, e) || this)._isTransitioning = !1, i._config = i._getConfig(n), i._triggerArray = q('[data-bs-toggle=\"collapse\"][href=\"#' + e.id + '\"],[data-bs-toggle=\"collapse\"][data-bs-target=\"#' + e.id + '\"]');\n\n      for (var o = q('[data-bs-toggle=\"collapse\"]'), s = 0, r = o.length; s < r; s++) {\n        var a = o[s],\n            l = h(a),\n            c = q(l).filter(function (t) {\n          return t === e;\n        });\n        null !== l && c.length && (i._selector = l, i._triggerArray.push(a));\n      }\n\n      return i._parent = i._config.parent ? i._getParent() : null, i._config.parent || i._addAriaAndCollapsedClass(i._element, i._triggerArray), i._config.toggle && i.toggle(), i;\n    }\n\n    r(e, t);\n    var n = e.prototype;\n    return n.toggle = function () {\n      this._element.classList.contains(\"show\") ? this.hide() : this.show();\n    }, n.show = function () {\n      var t = this;\n\n      if (!this._isTransitioning && !this._element.classList.contains(\"show\")) {\n        var n, i;\n        this._parent && 0 === (n = q(\".show, .collapsing\", this._parent).filter(function (e) {\n          return \"string\" == typeof t._config.parent ? e.getAttribute(\"data-bs-parent\") === t._config.parent : e.classList.contains(\"collapse\");\n        })).length && (n = null);\n        var o = Q(this._selector);\n\n        if (n) {\n          var s = n.find(function (t) {\n            return o !== t;\n          });\n          if ((i = s ? L(s, \"bs.collapse\") : null) && i._isTransitioning) return;\n        }\n\n        if (!K.trigger(this._element, \"show.bs.collapse\").defaultPrevented) {\n          n && n.forEach(function (t) {\n            o !== t && e.collapseInterface(t, \"hide\"), i || k(t, \"bs.collapse\", null);\n          });\n\n          var r = this._getDimension();\n\n          this._element.classList.remove(\"collapse\"), this._element.classList.add(\"collapsing\"), this._element.style[r] = 0, this._triggerArray.length && this._triggerArray.forEach(function (t) {\n            t.classList.remove(\"collapsed\"), t.setAttribute(\"aria-expanded\", !0);\n          }), this.setTransitioning(!0);\n          var a = \"scroll\" + (r[0].toUpperCase() + r.slice(1)),\n              l = f(this._element);\n          K.one(this._element, \"transitionend\", function () {\n            t._element.classList.remove(\"collapsing\"), t._element.classList.add(\"collapse\", \"show\"), t._element.style[r] = \"\", t.setTransitioning(!1), K.trigger(t._element, \"shown.bs.collapse\");\n          }), m(this._element, l), this._element.style[r] = this._element[a] + \"px\";\n        }\n      }\n    }, n.hide = function () {\n      var t = this;\n\n      if (!this._isTransitioning && this._element.classList.contains(\"show\") && !K.trigger(this._element, \"hide.bs.collapse\").defaultPrevented) {\n        var e = this._getDimension();\n\n        this._element.style[e] = this._element.getBoundingClientRect()[e] + \"px\", y(this._element), this._element.classList.add(\"collapsing\"), this._element.classList.remove(\"collapse\", \"show\");\n        var n = this._triggerArray.length;\n        if (n > 0) for (var i = 0; i < n; i++) {\n          var o = this._triggerArray[i],\n              s = d(o);\n          s && !s.classList.contains(\"show\") && (o.classList.add(\"collapsed\"), o.setAttribute(\"aria-expanded\", !1));\n        }\n        this.setTransitioning(!0), this._element.style[e] = \"\";\n        var r = f(this._element);\n        K.one(this._element, \"transitionend\", function () {\n          t.setTransitioning(!1), t._element.classList.remove(\"collapsing\"), t._element.classList.add(\"collapse\"), K.trigger(t._element, \"hidden.bs.collapse\");\n        }), m(this._element, r);\n      }\n    }, n.setTransitioning = function (t) {\n      this._isTransitioning = t;\n    }, n.dispose = function () {\n      t.prototype.dispose.call(this), this._config = null, this._parent = null, this._triggerArray = null, this._isTransitioning = null;\n    }, n._getConfig = function (t) {\n      return (t = s({}, tt, t)).toggle = Boolean(t.toggle), _(\"collapse\", t, et), t;\n    }, n._getDimension = function () {\n      return this._element.classList.contains(\"width\") ? \"width\" : \"height\";\n    }, n._getParent = function () {\n      var t = this,\n          e = this._config.parent;\n      return g(e) ? void 0 === e.jquery && void 0 === e[0] || (e = e[0]) : e = Q(e), q('[data-bs-toggle=\"collapse\"][data-bs-parent=\"' + e + '\"]', e).forEach(function (e) {\n        var n = d(e);\n\n        t._addAriaAndCollapsedClass(n, [e]);\n      }), e;\n    }, n._addAriaAndCollapsedClass = function (t, e) {\n      if (t && e.length) {\n        var n = t.classList.contains(\"show\");\n        e.forEach(function (t) {\n          n ? t.classList.remove(\"collapsed\") : t.classList.add(\"collapsed\"), t.setAttribute(\"aria-expanded\", n);\n        });\n      }\n    }, e.collapseInterface = function (t, n) {\n      var i = L(t, \"bs.collapse\"),\n          o = s({}, tt, X.getDataAttributes(t), \"object\" == _typeof(n) && n ? n : {});\n\n      if (!i && o.toggle && \"string\" == typeof n && /show|hide/.test(n) && (o.toggle = !1), i || (i = new e(t, o)), \"string\" == typeof n) {\n        if (void 0 === i[n]) throw new TypeError('No method named \"' + n + '\"');\n        i[n]();\n      }\n    }, e.jQueryInterface = function (t) {\n      return this.each(function () {\n        e.collapseInterface(this, t);\n      });\n    }, o(e, null, [{\n      key: \"Default\",\n      get: function get() {\n        return tt;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return \"bs.collapse\";\n      }\n    }]), e;\n  }(W);\n\n  K.on(document, \"click.bs.collapse.data-api\", '[data-bs-toggle=\"collapse\"]', function (t) {\n    (\"A\" === t.target.tagName || t.delegateTarget && \"A\" === t.delegateTarget.tagName) && t.preventDefault();\n    var e = X.getDataAttributes(this),\n        n = h(this);\n    q(n).forEach(function (t) {\n      var n,\n          i = L(t, \"bs.collapse\");\n      i ? (null === i._parent && \"string\" == typeof e.parent && (i._config.parent = e.parent, i._parent = i._getParent()), n = \"toggle\") : n = e, nt.collapseInterface(t, n);\n    });\n  }), T(\"collapse\", nt);\n\n  var it = new RegExp(\"ArrowUp|ArrowDown|Escape\"),\n      ot = E ? \"top-end\" : \"top-start\",\n      st = E ? \"top-start\" : \"top-end\",\n      rt = E ? \"bottom-end\" : \"bottom-start\",\n      at = E ? \"bottom-start\" : \"bottom-end\",\n      lt = E ? \"left-start\" : \"right-start\",\n      ct = E ? \"right-start\" : \"left-start\",\n      ut = {\n    offset: [0, 2],\n    flip: !0,\n    boundary: \"clippingParents\",\n    reference: \"toggle\",\n    display: \"dynamic\",\n    popperConfig: null\n  },\n      ht = {\n    offset: \"(array|string|function)\",\n    flip: \"boolean\",\n    boundary: \"(string|element)\",\n    reference: \"(string|element|object)\",\n    display: \"string\",\n    popperConfig: \"(null|object|function)\"\n  },\n      dt = function (e) {\n    function i(t, n) {\n      var i;\n      return (i = e.call(this, t) || this)._popper = null, i._config = i._getConfig(n), i._menu = i._getMenuElement(), i._inNavbar = i._detectNavbar(), i._addEventListeners(), i;\n    }\n\n    r(i, e);\n    var a = i.prototype;\n    return a.toggle = function () {\n      if (!this._element.disabled && !this._element.classList.contains(\"disabled\")) {\n        var t = this._element.classList.contains(\"show\");\n\n        i.clearMenus(), t || this.show();\n      }\n    }, a.show = function () {\n      if (!(this._element.disabled || this._element.classList.contains(\"disabled\") || this._menu.classList.contains(\"show\"))) {\n        var e = i.getParentFromElement(this._element),\n            o = {\n          relatedTarget: this._element\n        };\n\n        if (!K.trigger(this._element, \"show.bs.dropdown\", o).defaultPrevented) {\n          if (this._inNavbar) X.setDataAttribute(this._menu, \"popper\", \"none\");else {\n            if (void 0 === n) throw new TypeError(\"Bootstrap's dropdowns require Popper (https://popper.js.org)\");\n            var s = this._element;\n            \"parent\" === this._config.reference ? s = e : g(this._config.reference) ? (s = this._config.reference, void 0 !== this._config.reference.jquery && (s = this._config.reference[0])) : \"object\" == _typeof(this._config.reference) && (s = this._config.reference);\n\n            var r = this._getPopperConfig(),\n                a = r.modifiers.find(function (t) {\n              return \"applyStyles\" === t.name && !1 === t.enabled;\n            });\n\n            this._popper = t.createPopper(s, this._menu, r), a && X.setDataAttribute(this._menu, \"popper\", \"static\");\n          }\n          var l;\n          \"ontouchstart\" in document.documentElement && !e.closest(\".navbar-nav\") && (l = []).concat.apply(l, document.body.children).forEach(function (t) {\n            return K.on(t, \"mouseover\", null, function () {});\n          }), this._element.focus(), this._element.setAttribute(\"aria-expanded\", !0), this._menu.classList.toggle(\"show\"), this._element.classList.toggle(\"show\"), K.trigger(this._element, \"shown.bs.dropdown\", o);\n        }\n      }\n    }, a.hide = function () {\n      if (!this._element.disabled && !this._element.classList.contains(\"disabled\") && this._menu.classList.contains(\"show\")) {\n        var t = {\n          relatedTarget: this._element\n        };\n        K.trigger(this._element, \"hide.bs.dropdown\", t).defaultPrevented || (this._popper && this._popper.destroy(), this._menu.classList.toggle(\"show\"), this._element.classList.toggle(\"show\"), X.removeDataAttribute(this._menu, \"popper\"), K.trigger(this._element, \"hidden.bs.dropdown\", t));\n      }\n    }, a.dispose = function () {\n      e.prototype.dispose.call(this), K.off(this._element, \".bs.dropdown\"), this._menu = null, this._popper && (this._popper.destroy(), this._popper = null);\n    }, a.update = function () {\n      this._inNavbar = this._detectNavbar(), this._popper && this._popper.update();\n    }, a._addEventListeners = function () {\n      var t = this;\n      K.on(this._element, \"click.bs.dropdown\", function (e) {\n        e.preventDefault(), e.stopPropagation(), t.toggle();\n      });\n    }, a._getConfig = function (t) {\n      if (t = s({}, this.constructor.Default, X.getDataAttributes(this._element), t), _(\"dropdown\", t, this.constructor.DefaultType), \"object\" == _typeof(t.reference) && !g(t.reference) && \"function\" != typeof t.reference.getBoundingClientRect) throw new TypeError(\"dropdown\".toUpperCase() + ': Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method.');\n      return t;\n    }, a._getMenuElement = function () {\n      return function (t, e) {\n        for (var n = t.nextElementSibling; n;) {\n          if (n.matches(e)) return [n];\n          n = n.nextElementSibling;\n        }\n\n        return [];\n      }(this._element, \".dropdown-menu\")[0];\n    }, a._getPlacement = function () {\n      var t = this._element.parentNode;\n      if (t.classList.contains(\"dropend\")) return lt;\n      if (t.classList.contains(\"dropstart\")) return ct;\n      var e = \"end\" === getComputedStyle(this._menu).getPropertyValue(\"--bs-position\").trim();\n      return t.classList.contains(\"dropup\") ? e ? st : ot : e ? at : rt;\n    }, a._detectNavbar = function () {\n      return null !== this._element.closest(\".navbar\");\n    }, a._getOffset = function () {\n      var t = this,\n          e = this._config.offset;\n      return \"string\" == typeof e ? e.split(\",\").map(function (t) {\n        return Number.parseInt(t, 10);\n      }) : \"function\" == typeof e ? function (n) {\n        return e(n, t._element);\n      } : e;\n    }, a._getPopperConfig = function () {\n      var t = {\n        placement: this._getPlacement(),\n        modifiers: [{\n          name: \"preventOverflow\",\n          options: {\n            altBoundary: this._config.flip,\n            boundary: this._config.boundary\n          }\n        }, {\n          name: \"offset\",\n          options: {\n            offset: this._getOffset()\n          }\n        }]\n      };\n      return \"static\" === this._config.display && (t.modifiers = [{\n        name: \"applyStyles\",\n        enabled: !1\n      }]), s({}, t, \"function\" == typeof this._config.popperConfig ? this._config.popperConfig(t) : this._config.popperConfig);\n    }, i.dropdownInterface = function (t, e) {\n      var n = L(t, \"bs.dropdown\");\n\n      if (n || (n = new i(t, \"object\" == _typeof(e) ? e : null)), \"string\" == typeof e) {\n        if (void 0 === n[e]) throw new TypeError('No method named \"' + e + '\"');\n        n[e]();\n      }\n    }, i.jQueryInterface = function (t) {\n      return this.each(function () {\n        i.dropdownInterface(this, t);\n      });\n    }, i.clearMenus = function (t) {\n      if (!t || 2 !== t.button && (\"keyup\" !== t.type || \"Tab\" === t.key)) for (var e = q('[data-bs-toggle=\"dropdown\"]'), n = 0, i = e.length; n < i; n++) {\n        var o = L(e[n], \"bs.dropdown\"),\n            s = {\n          relatedTarget: e[n]\n        };\n\n        if (t && \"click\" === t.type && (s.clickEvent = t), o) {\n          var r,\n              a = o._menu;\n          if (e[n].classList.contains(\"show\") && !(t && (\"click\" === t.type && /input|textarea/i.test(t.target.tagName) || \"keyup\" === t.type && \"Tab\" === t.key) && a.contains(t.target) || K.trigger(e[n], \"hide.bs.dropdown\", s).defaultPrevented)) \"ontouchstart\" in document.documentElement && (r = []).concat.apply(r, document.body.children).forEach(function (t) {\n            return K.off(t, \"mouseover\", null, function () {});\n          }), e[n].setAttribute(\"aria-expanded\", \"false\"), o._popper && o._popper.destroy(), a.classList.remove(\"show\"), e[n].classList.remove(\"show\"), X.removeDataAttribute(a, \"popper\"), K.trigger(e[n], \"hidden.bs.dropdown\", s);\n        }\n      }\n    }, i.getParentFromElement = function (t) {\n      return d(t) || t.parentNode;\n    }, i.dataApiKeydownHandler = function (t) {\n      if (!(/input|textarea/i.test(t.target.tagName) ? \"Space\" === t.key || \"Escape\" !== t.key && (\"ArrowDown\" !== t.key && \"ArrowUp\" !== t.key || t.target.closest(\".dropdown-menu\")) : !it.test(t.key)) && (t.preventDefault(), t.stopPropagation(), !this.disabled && !this.classList.contains(\"disabled\"))) {\n        var e = i.getParentFromElement(this),\n            n = this.classList.contains(\"show\");\n        if (\"Escape\" === t.key) return (this.matches('[data-bs-toggle=\"dropdown\"]') ? this : $(this, '[data-bs-toggle=\"dropdown\"]')[0]).focus(), void i.clearMenus();\n        if (n || \"ArrowUp\" !== t.key && \"ArrowDown\" !== t.key) {\n          if (n && \"Space\" !== t.key) {\n            var o = q(\".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)\", e).filter(v);\n\n            if (o.length) {\n              var s = o.indexOf(t.target);\n              \"ArrowUp\" === t.key && s > 0 && s--, \"ArrowDown\" === t.key && s < o.length - 1 && s++, o[s = -1 === s ? 0 : s].focus();\n            }\n          } else i.clearMenus();\n        } else (this.matches('[data-bs-toggle=\"dropdown\"]') ? this : $(this, '[data-bs-toggle=\"dropdown\"]')[0]).click();\n      }\n    }, o(i, null, [{\n      key: \"Default\",\n      get: function get() {\n        return ut;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return ht;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return \"bs.dropdown\";\n      }\n    }]), i;\n  }(W);\n\n  K.on(document, \"keydown.bs.dropdown.data-api\", '[data-bs-toggle=\"dropdown\"]', dt.dataApiKeydownHandler), K.on(document, \"keydown.bs.dropdown.data-api\", \".dropdown-menu\", dt.dataApiKeydownHandler), K.on(document, \"click.bs.dropdown.data-api\", dt.clearMenus), K.on(document, \"keyup.bs.dropdown.data-api\", dt.clearMenus), K.on(document, \"click.bs.dropdown.data-api\", '[data-bs-toggle=\"dropdown\"]', function (t) {\n    t.preventDefault(), t.stopPropagation(), dt.dropdownInterface(this, \"toggle\");\n  }), K.on(document, \"click.bs.dropdown.data-api\", \".dropdown form\", function (t) {\n    return t.stopPropagation();\n  }), T(\"dropdown\", dt);\n\n  var ft = {\n    backdrop: !0,\n    keyboard: !0,\n    focus: !0\n  },\n      pt = {\n    backdrop: \"(boolean|string)\",\n    keyboard: \"boolean\",\n    focus: \"boolean\"\n  },\n      gt = function (t) {\n    function e(e, n) {\n      var i;\n      return (i = t.call(this, e) || this)._config = i._getConfig(n), i._dialog = Q(\".modal-dialog\", e), i._backdrop = null, i._isShown = !1, i._isBodyOverflowing = !1, i._ignoreBackdropClick = !1, i._isTransitioning = !1, i._scrollbarWidth = 0, i;\n    }\n\n    r(e, t);\n    var n = e.prototype;\n    return n.toggle = function (t) {\n      return this._isShown ? this.hide() : this.show(t);\n    }, n.show = function (t) {\n      var e = this;\n\n      if (!this._isShown && !this._isTransitioning) {\n        this._element.classList.contains(\"fade\") && (this._isTransitioning = !0);\n        var n = K.trigger(this._element, \"show.bs.modal\", {\n          relatedTarget: t\n        });\n        this._isShown || n.defaultPrevented || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), K.on(this._element, \"click.dismiss.bs.modal\", '[data-bs-dismiss=\"modal\"]', function (t) {\n          return e.hide(t);\n        }), K.on(this._dialog, \"mousedown.dismiss.bs.modal\", function () {\n          K.one(e._element, \"mouseup.dismiss.bs.modal\", function (t) {\n            t.target === e._element && (e._ignoreBackdropClick = !0);\n          });\n        }), this._showBackdrop(function () {\n          return e._showElement(t);\n        }));\n      }\n    }, n.hide = function (t) {\n      var e = this;\n\n      if (t && t.preventDefault(), this._isShown && !this._isTransitioning && !K.trigger(this._element, \"hide.bs.modal\").defaultPrevented) {\n        this._isShown = !1;\n\n        var n = this._element.classList.contains(\"fade\");\n\n        if (n && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), K.off(document, \"focusin.bs.modal\"), this._element.classList.remove(\"show\"), K.off(this._element, \"click.dismiss.bs.modal\"), K.off(this._dialog, \"mousedown.dismiss.bs.modal\"), n) {\n          var i = f(this._element);\n          K.one(this._element, \"transitionend\", function (t) {\n            return e._hideModal(t);\n          }), m(this._element, i);\n        } else this._hideModal();\n      }\n    }, n.dispose = function () {\n      [window, this._element, this._dialog].forEach(function (t) {\n        return K.off(t, \".bs.modal\");\n      }), t.prototype.dispose.call(this), K.off(document, \"focusin.bs.modal\"), this._config = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._isTransitioning = null, this._scrollbarWidth = null;\n    }, n.handleUpdate = function () {\n      this._adjustDialog();\n    }, n._getConfig = function (t) {\n      return t = s({}, ft, t), _(\"modal\", t, pt), t;\n    }, n._showElement = function (t) {\n      var e = this,\n          n = this._element.classList.contains(\"fade\"),\n          i = Q(\".modal-body\", this._dialog);\n\n      this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = \"block\", this._element.removeAttribute(\"aria-hidden\"), this._element.setAttribute(\"aria-modal\", !0), this._element.setAttribute(\"role\", \"dialog\"), this._element.scrollTop = 0, i && (i.scrollTop = 0), n && y(this._element), this._element.classList.add(\"show\"), this._config.focus && this._enforceFocus();\n\n      var o = function o() {\n        e._config.focus && e._element.focus(), e._isTransitioning = !1, K.trigger(e._element, \"shown.bs.modal\", {\n          relatedTarget: t\n        });\n      };\n\n      if (n) {\n        var s = f(this._dialog);\n        K.one(this._dialog, \"transitionend\", o), m(this._dialog, s);\n      } else o();\n    }, n._enforceFocus = function () {\n      var t = this;\n      K.off(document, \"focusin.bs.modal\"), K.on(document, \"focusin.bs.modal\", function (e) {\n        document === e.target || t._element === e.target || t._element.contains(e.target) || t._element.focus();\n      });\n    }, n._setEscapeEvent = function () {\n      var t = this;\n      this._isShown ? K.on(this._element, \"keydown.dismiss.bs.modal\", function (e) {\n        t._config.keyboard && \"Escape\" === e.key ? (e.preventDefault(), t.hide()) : t._config.keyboard || \"Escape\" !== e.key || t._triggerBackdropTransition();\n      }) : K.off(this._element, \"keydown.dismiss.bs.modal\");\n    }, n._setResizeEvent = function () {\n      var t = this;\n      this._isShown ? K.on(window, \"resize.bs.modal\", function () {\n        return t._adjustDialog();\n      }) : K.off(window, \"resize.bs.modal\");\n    }, n._hideModal = function () {\n      var t = this;\n      this._element.style.display = \"none\", this._element.setAttribute(\"aria-hidden\", !0), this._element.removeAttribute(\"aria-modal\"), this._element.removeAttribute(\"role\"), this._isTransitioning = !1, this._showBackdrop(function () {\n        document.body.classList.remove(\"modal-open\"), t._resetAdjustments(), t._resetScrollbar(), K.trigger(t._element, \"hidden.bs.modal\");\n      });\n    }, n._removeBackdrop = function () {\n      this._backdrop.parentNode.removeChild(this._backdrop), this._backdrop = null;\n    }, n._showBackdrop = function (t) {\n      var e = this,\n          n = this._element.classList.contains(\"fade\") ? \"fade\" : \"\";\n\n      if (this._isShown && this._config.backdrop) {\n        if (this._backdrop = document.createElement(\"div\"), this._backdrop.className = \"modal-backdrop\", n && this._backdrop.classList.add(n), document.body.appendChild(this._backdrop), K.on(this._element, \"click.dismiss.bs.modal\", function (t) {\n          e._ignoreBackdropClick ? e._ignoreBackdropClick = !1 : t.target === t.currentTarget && (\"static\" === e._config.backdrop ? e._triggerBackdropTransition() : e.hide());\n        }), n && y(this._backdrop), this._backdrop.classList.add(\"show\"), !n) return void t();\n        var i = f(this._backdrop);\n        K.one(this._backdrop, \"transitionend\", t), m(this._backdrop, i);\n      } else if (!this._isShown && this._backdrop) {\n        this._backdrop.classList.remove(\"show\");\n\n        var o = function o() {\n          e._removeBackdrop(), t();\n        };\n\n        if (this._element.classList.contains(\"fade\")) {\n          var s = f(this._backdrop);\n          K.one(this._backdrop, \"transitionend\", o), m(this._backdrop, s);\n        } else o();\n      } else t();\n    }, n._triggerBackdropTransition = function () {\n      var t = this;\n\n      if (!K.trigger(this._element, \"hidePrevented.bs.modal\").defaultPrevented) {\n        var e = this._element.scrollHeight > document.documentElement.clientHeight;\n        e || (this._element.style.overflowY = \"hidden\"), this._element.classList.add(\"modal-static\");\n        var n = f(this._dialog);\n        K.off(this._element, \"transitionend\"), K.one(this._element, \"transitionend\", function () {\n          t._element.classList.remove(\"modal-static\"), e || (K.one(t._element, \"transitionend\", function () {\n            t._element.style.overflowY = \"\";\n          }), m(t._element, n));\n        }), m(this._element, n), this._element.focus();\n      }\n    }, n._adjustDialog = function () {\n      var t = this._element.scrollHeight > document.documentElement.clientHeight;\n      (!this._isBodyOverflowing && t && !E || this._isBodyOverflowing && !t && E) && (this._element.style.paddingLeft = this._scrollbarWidth + \"px\"), (this._isBodyOverflowing && !t && !E || !this._isBodyOverflowing && t && E) && (this._element.style.paddingRight = this._scrollbarWidth + \"px\");\n    }, n._resetAdjustments = function () {\n      this._element.style.paddingLeft = \"\", this._element.style.paddingRight = \"\";\n    }, n._checkScrollbar = function () {\n      var t = document.body.getBoundingClientRect();\n      this._isBodyOverflowing = Math.round(t.left + t.right) < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();\n    }, n._setScrollbar = function () {\n      var t = this;\n      this._isBodyOverflowing && (this._setElementAttributes(\".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\", \"paddingRight\", function (e) {\n        return e + t._scrollbarWidth;\n      }), this._setElementAttributes(\".sticky-top\", \"marginRight\", function (e) {\n        return e - t._scrollbarWidth;\n      }), this._setElementAttributes(\"body\", \"paddingRight\", function (e) {\n        return e + t._scrollbarWidth;\n      })), document.body.classList.add(\"modal-open\");\n    }, n._setElementAttributes = function (t, e, n) {\n      q(t).forEach(function (t) {\n        var i = t.style[e],\n            o = window.getComputedStyle(t)[e];\n        X.setDataAttribute(t, e, i), t.style[e] = n(Number.parseFloat(o)) + \"px\";\n      });\n    }, n._resetScrollbar = function () {\n      this._resetElementAttributes(\".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\", \"paddingRight\"), this._resetElementAttributes(\".sticky-top\", \"marginRight\"), this._resetElementAttributes(\"body\", \"paddingRight\");\n    }, n._resetElementAttributes = function (t, e) {\n      q(t).forEach(function (t) {\n        var n = X.getDataAttribute(t, e);\n        void 0 === n && t === document.body ? t.style[e] = \"\" : (X.removeDataAttribute(t, e), t.style[e] = n);\n      });\n    }, n._getScrollbarWidth = function () {\n      var t = document.createElement(\"div\");\n      t.className = \"modal-scrollbar-measure\", document.body.appendChild(t);\n      var e = t.getBoundingClientRect().width - t.clientWidth;\n      return document.body.removeChild(t), e;\n    }, e.jQueryInterface = function (t, n) {\n      return this.each(function () {\n        var i = L(this, \"bs.modal\"),\n            o = s({}, ft, X.getDataAttributes(this), \"object\" == _typeof(t) && t ? t : {});\n\n        if (i || (i = new e(this, o)), \"string\" == typeof t) {\n          if (void 0 === i[t]) throw new TypeError('No method named \"' + t + '\"');\n          i[t](n);\n        }\n      });\n    }, o(e, null, [{\n      key: \"Default\",\n      get: function get() {\n        return ft;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return \"bs.modal\";\n      }\n    }]), e;\n  }(W);\n\n  K.on(document, \"click.bs.modal.data-api\", '[data-bs-toggle=\"modal\"]', function (t) {\n    var e = this,\n        n = d(this);\n    \"A\" !== this.tagName && \"AREA\" !== this.tagName || t.preventDefault(), K.one(n, \"show.bs.modal\", function (t) {\n      t.defaultPrevented || K.one(n, \"hidden.bs.modal\", function () {\n        v(e) && e.focus();\n      });\n    });\n    var i = L(n, \"bs.modal\");\n\n    if (!i) {\n      var o = s({}, X.getDataAttributes(n), X.getDataAttributes(this));\n      i = new gt(n, o);\n    }\n\n    i.toggle(this);\n  }), T(\"modal\", gt);\n  var mt = new Set([\"background\", \"cite\", \"href\", \"itemtype\", \"longdesc\", \"poster\", \"src\", \"xlink:href\"]),\n      _t = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi,\n      vt = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i;\n\n  function bt(t, e, n) {\n    var i;\n    if (!t.length) return t;\n    if (n && \"function\" == typeof n) return n(t);\n\n    for (var o = new window.DOMParser().parseFromString(t, \"text/html\"), s = Object.keys(e), r = (i = []).concat.apply(i, o.body.querySelectorAll(\"*\")), a = function a(t, n) {\n      var i,\n          o = r[t],\n          a = o.nodeName.toLowerCase();\n      if (!s.includes(a)) return o.parentNode.removeChild(o), \"continue\";\n      var l = (i = []).concat.apply(i, o.attributes),\n          c = [].concat(e[\"*\"] || [], e[a] || []);\n      l.forEach(function (t) {\n        (function (t, e) {\n          var n = t.nodeName.toLowerCase();\n          if (e.includes(n)) return !mt.has(n) || Boolean(_t.test(t.nodeValue) || vt.test(t.nodeValue));\n\n          for (var i = e.filter(function (t) {\n            return t instanceof RegExp;\n          }), o = 0, s = i.length; o < s; o++) {\n            if (i[o].test(n)) return !0;\n          }\n\n          return !1;\n        })(t, c) || o.removeAttribute(t.nodeName);\n      });\n    }, l = 0, c = r.length; l < c; l++) {\n      a(l);\n    }\n\n    return o.body.innerHTML;\n  }\n\n  var yt = new RegExp(\"(^|\\\\s)bs-tooltip\\\\S+\", \"g\"),\n      wt = new Set([\"sanitize\", \"allowList\", \"sanitizeFn\"]),\n      Et = {\n    animation: \"boolean\",\n    template: \"string\",\n    title: \"(string|element|function)\",\n    trigger: \"string\",\n    delay: \"(number|object)\",\n    html: \"boolean\",\n    selector: \"(string|boolean)\",\n    placement: \"(string|function)\",\n    offset: \"(array|string|function)\",\n    container: \"(string|element|boolean)\",\n    fallbackPlacements: \"array\",\n    boundary: \"(string|element)\",\n    customClass: \"(string|function)\",\n    sanitize: \"boolean\",\n    sanitizeFn: \"(null|function)\",\n    allowList: \"object\",\n    popperConfig: \"(null|object|function)\"\n  },\n      Tt = {\n    AUTO: \"auto\",\n    TOP: \"top\",\n    RIGHT: E ? \"left\" : \"right\",\n    BOTTOM: \"bottom\",\n    LEFT: E ? \"right\" : \"left\"\n  },\n      At = {\n    animation: !0,\n    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n    trigger: \"hover focus\",\n    title: \"\",\n    delay: 0,\n    html: !1,\n    selector: !1,\n    placement: \"top\",\n    offset: [0, 0],\n    container: !1,\n    fallbackPlacements: [\"top\", \"right\", \"bottom\", \"left\"],\n    boundary: \"clippingParents\",\n    customClass: \"\",\n    sanitize: !0,\n    sanitizeFn: null,\n    allowList: {\n      \"*\": [\"class\", \"dir\", \"id\", \"lang\", \"role\", /^aria-[\\w-]*$/i],\n      a: [\"target\", \"href\", \"title\", \"rel\"],\n      area: [],\n      b: [],\n      br: [],\n      col: [],\n      code: [],\n      div: [],\n      em: [],\n      hr: [],\n      h1: [],\n      h2: [],\n      h3: [],\n      h4: [],\n      h5: [],\n      h6: [],\n      i: [],\n      img: [\"src\", \"srcset\", \"alt\", \"title\", \"width\", \"height\"],\n      li: [],\n      ol: [],\n      p: [],\n      pre: [],\n      s: [],\n      small: [],\n      span: [],\n      sub: [],\n      sup: [],\n      strong: [],\n      u: [],\n      ul: []\n    },\n    popperConfig: null\n  },\n      kt = {\n    HIDE: \"hide.bs.tooltip\",\n    HIDDEN: \"hidden.bs.tooltip\",\n    SHOW: \"show.bs.tooltip\",\n    SHOWN: \"shown.bs.tooltip\",\n    INSERTED: \"inserted.bs.tooltip\",\n    CLICK: \"click.bs.tooltip\",\n    FOCUSIN: \"focusin.bs.tooltip\",\n    FOCUSOUT: \"focusout.bs.tooltip\",\n    MOUSEENTER: \"mouseenter.bs.tooltip\",\n    MOUSELEAVE: \"mouseleave.bs.tooltip\"\n  },\n      Lt = function (e) {\n    function i(t, i) {\n      var o;\n      if (void 0 === n) throw new TypeError(\"Bootstrap's tooltips require Popper (https://popper.js.org)\");\n      return (o = e.call(this, t) || this)._isEnabled = !0, o._timeout = 0, o._hoverState = \"\", o._activeTrigger = {}, o._popper = null, o.config = o._getConfig(i), o.tip = null, o._setListeners(), o;\n    }\n\n    r(i, e);\n    var a = i.prototype;\n    return a.enable = function () {\n      this._isEnabled = !0;\n    }, a.disable = function () {\n      this._isEnabled = !1;\n    }, a.toggleEnabled = function () {\n      this._isEnabled = !this._isEnabled;\n    }, a.toggle = function (t) {\n      if (this._isEnabled) if (t) {\n        var e = this._initializeOnDelegatedTarget(t);\n\n        e._activeTrigger.click = !e._activeTrigger.click, e._isWithActiveTrigger() ? e._enter(null, e) : e._leave(null, e);\n      } else {\n        if (this.getTipElement().classList.contains(\"show\")) return void this._leave(null, this);\n\n        this._enter(null, this);\n      }\n    }, a.dispose = function () {\n      clearTimeout(this._timeout), K.off(this._element, this.constructor.EVENT_KEY), K.off(this._element.closest(\".modal\"), \"hide.bs.modal\", this._hideModalHandler), this.tip && this.tip.parentNode && this.tip.parentNode.removeChild(this.tip), this._isEnabled = null, this._timeout = null, this._hoverState = null, this._activeTrigger = null, this._popper && this._popper.destroy(), this._popper = null, this.config = null, this.tip = null, e.prototype.dispose.call(this);\n    }, a.show = function () {\n      var e = this;\n      if (\"none\" === this._element.style.display) throw new Error(\"Please use show on visible elements\");\n\n      if (this.isWithContent() && this._isEnabled) {\n        var n = K.trigger(this._element, this.constructor.Event.SHOW),\n            i = function t(e) {\n          if (!document.documentElement.attachShadow) return null;\n\n          if (\"function\" == typeof e.getRootNode) {\n            var n = e.getRootNode();\n            return n instanceof ShadowRoot ? n : null;\n          }\n\n          return e instanceof ShadowRoot ? e : e.parentNode ? t(e.parentNode) : null;\n        }(this._element),\n            o = null === i ? this._element.ownerDocument.documentElement.contains(this._element) : i.contains(this._element);\n\n        if (!n.defaultPrevented && o) {\n          var s = this.getTipElement(),\n              r = c(this.constructor.NAME);\n          s.setAttribute(\"id\", r), this._element.setAttribute(\"aria-describedby\", r), this.setContent(), this.config.animation && s.classList.add(\"fade\");\n\n          var a = \"function\" == typeof this.config.placement ? this.config.placement.call(this, s, this._element) : this.config.placement,\n              l = this._getAttachment(a);\n\n          this._addAttachmentClass(l);\n\n          var u = this._getContainer();\n\n          k(s, this.constructor.DATA_KEY, this), this._element.ownerDocument.documentElement.contains(this.tip) || u.appendChild(s), K.trigger(this._element, this.constructor.Event.INSERTED), this._popper = t.createPopper(this._element, s, this._getPopperConfig(l)), s.classList.add(\"show\");\n          var h,\n              d,\n              p = \"function\" == typeof this.config.customClass ? this.config.customClass() : this.config.customClass;\n          p && (h = s.classList).add.apply(h, p.split(\" \")), \"ontouchstart\" in document.documentElement && (d = []).concat.apply(d, document.body.children).forEach(function (t) {\n            K.on(t, \"mouseover\", function () {});\n          });\n\n          var g = function g() {\n            var t = e._hoverState;\n            e._hoverState = null, K.trigger(e._element, e.constructor.Event.SHOWN), \"out\" === t && e._leave(null, e);\n          };\n\n          if (this.tip.classList.contains(\"fade\")) {\n            var _ = f(this.tip);\n\n            K.one(this.tip, \"transitionend\", g), m(this.tip, _);\n          } else g();\n        }\n      }\n    }, a.hide = function () {\n      var t = this;\n\n      if (this._popper) {\n        var e = this.getTipElement(),\n            n = function n() {\n          \"show\" !== t._hoverState && e.parentNode && e.parentNode.removeChild(e), t._cleanTipClass(), t._element.removeAttribute(\"aria-describedby\"), K.trigger(t._element, t.constructor.Event.HIDDEN), t._popper && (t._popper.destroy(), t._popper = null);\n        };\n\n        if (!K.trigger(this._element, this.constructor.Event.HIDE).defaultPrevented) {\n          var i;\n\n          if (e.classList.remove(\"show\"), \"ontouchstart\" in document.documentElement && (i = []).concat.apply(i, document.body.children).forEach(function (t) {\n            return K.off(t, \"mouseover\", b);\n          }), this._activeTrigger.click = !1, this._activeTrigger.focus = !1, this._activeTrigger.hover = !1, this.tip.classList.contains(\"fade\")) {\n            var o = f(e);\n            K.one(e, \"transitionend\", n), m(e, o);\n          } else n();\n\n          this._hoverState = \"\";\n        }\n      }\n    }, a.update = function () {\n      null !== this._popper && this._popper.update();\n    }, a.isWithContent = function () {\n      return Boolean(this.getTitle());\n    }, a.getTipElement = function () {\n      if (this.tip) return this.tip;\n      var t = document.createElement(\"div\");\n      return t.innerHTML = this.config.template, this.tip = t.children[0], this.tip;\n    }, a.setContent = function () {\n      var t = this.getTipElement();\n      this.setElementContent(Q(\".tooltip-inner\", t), this.getTitle()), t.classList.remove(\"fade\", \"show\");\n    }, a.setElementContent = function (t, e) {\n      if (null !== t) return \"object\" == _typeof(e) && g(e) ? (e.jquery && (e = e[0]), void (this.config.html ? e.parentNode !== t && (t.innerHTML = \"\", t.appendChild(e)) : t.textContent = e.textContent)) : void (this.config.html ? (this.config.sanitize && (e = bt(e, this.config.allowList, this.config.sanitizeFn)), t.innerHTML = e) : t.textContent = e);\n    }, a.getTitle = function () {\n      var t = this._element.getAttribute(\"data-bs-original-title\");\n\n      return t || (t = \"function\" == typeof this.config.title ? this.config.title.call(this._element) : this.config.title), t;\n    }, a.updateAttachment = function (t) {\n      return \"right\" === t ? \"end\" : \"left\" === t ? \"start\" : t;\n    }, a._initializeOnDelegatedTarget = function (t, e) {\n      var n = this.constructor.DATA_KEY;\n      return (e = e || L(t.delegateTarget, n)) || (e = new this.constructor(t.delegateTarget, this._getDelegateConfig()), k(t.delegateTarget, n, e)), e;\n    }, a._getOffset = function () {\n      var t = this,\n          e = this.config.offset;\n      return \"string\" == typeof e ? e.split(\",\").map(function (t) {\n        return Number.parseInt(t, 10);\n      }) : \"function\" == typeof e ? function (n) {\n        return e(n, t._element);\n      } : e;\n    }, a._getPopperConfig = function (t) {\n      var e = this,\n          n = {\n        placement: t,\n        modifiers: [{\n          name: \"flip\",\n          options: {\n            altBoundary: !0,\n            fallbackPlacements: this.config.fallbackPlacements\n          }\n        }, {\n          name: \"offset\",\n          options: {\n            offset: this._getOffset()\n          }\n        }, {\n          name: \"preventOverflow\",\n          options: {\n            boundary: this.config.boundary\n          }\n        }, {\n          name: \"arrow\",\n          options: {\n            element: \".\" + this.constructor.NAME + \"-arrow\"\n          }\n        }, {\n          name: \"onChange\",\n          enabled: !0,\n          phase: \"afterWrite\",\n          fn: function fn(t) {\n            return e._handlePopperPlacementChange(t);\n          }\n        }],\n        onFirstUpdate: function onFirstUpdate(t) {\n          t.options.placement !== t.placement && e._handlePopperPlacementChange(t);\n        }\n      };\n      return s({}, n, \"function\" == typeof this.config.popperConfig ? this.config.popperConfig(n) : this.config.popperConfig);\n    }, a._addAttachmentClass = function (t) {\n      this.getTipElement().classList.add(\"bs-tooltip-\" + this.updateAttachment(t));\n    }, a._getContainer = function () {\n      return !1 === this.config.container ? document.body : g(this.config.container) ? this.config.container : Q(this.config.container);\n    }, a._getAttachment = function (t) {\n      return Tt[t.toUpperCase()];\n    }, a._setListeners = function () {\n      var t = this;\n      this.config.trigger.split(\" \").forEach(function (e) {\n        if (\"click\" === e) K.on(t._element, t.constructor.Event.CLICK, t.config.selector, function (e) {\n          return t.toggle(e);\n        });else if (\"manual\" !== e) {\n          var n = \"hover\" === e ? t.constructor.Event.MOUSEENTER : t.constructor.Event.FOCUSIN,\n              i = \"hover\" === e ? t.constructor.Event.MOUSELEAVE : t.constructor.Event.FOCUSOUT;\n          K.on(t._element, n, t.config.selector, function (e) {\n            return t._enter(e);\n          }), K.on(t._element, i, t.config.selector, function (e) {\n            return t._leave(e);\n          });\n        }\n      }), this._hideModalHandler = function () {\n        t._element && t.hide();\n      }, K.on(this._element.closest(\".modal\"), \"hide.bs.modal\", this._hideModalHandler), this.config.selector ? this.config = s({}, this.config, {\n        trigger: \"manual\",\n        selector: \"\"\n      }) : this._fixTitle();\n    }, a._fixTitle = function () {\n      var t = this._element.getAttribute(\"title\"),\n          e = _typeof(this._element.getAttribute(\"data-bs-original-title\"));\n\n      (t || \"string\" !== e) && (this._element.setAttribute(\"data-bs-original-title\", t || \"\"), !t || this._element.getAttribute(\"aria-label\") || this._element.textContent || this._element.setAttribute(\"aria-label\", t), this._element.setAttribute(\"title\", \"\"));\n    }, a._enter = function (t, e) {\n      e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger[\"focusin\" === t.type ? \"focus\" : \"hover\"] = !0), e.getTipElement().classList.contains(\"show\") || \"show\" === e._hoverState ? e._hoverState = \"show\" : (clearTimeout(e._timeout), e._hoverState = \"show\", e.config.delay && e.config.delay.show ? e._timeout = setTimeout(function () {\n        \"show\" === e._hoverState && e.show();\n      }, e.config.delay.show) : e.show());\n    }, a._leave = function (t, e) {\n      e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger[\"focusout\" === t.type ? \"focus\" : \"hover\"] = !1), e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = \"out\", e.config.delay && e.config.delay.hide ? e._timeout = setTimeout(function () {\n        \"out\" === e._hoverState && e.hide();\n      }, e.config.delay.hide) : e.hide());\n    }, a._isWithActiveTrigger = function () {\n      for (var t in this._activeTrigger) {\n        if (this._activeTrigger[t]) return !0;\n      }\n\n      return !1;\n    }, a._getConfig = function (t) {\n      var e = X.getDataAttributes(this._element);\n      return Object.keys(e).forEach(function (t) {\n        wt.has(t) && delete e[t];\n      }), t && \"object\" == _typeof(t.container) && t.container.jquery && (t.container = t.container[0]), \"number\" == typeof (t = s({}, this.constructor.Default, e, \"object\" == _typeof(t) && t ? t : {})).delay && (t.delay = {\n        show: t.delay,\n        hide: t.delay\n      }), \"number\" == typeof t.title && (t.title = t.title.toString()), \"number\" == typeof t.content && (t.content = t.content.toString()), _(\"tooltip\", t, this.constructor.DefaultType), t.sanitize && (t.template = bt(t.template, t.allowList, t.sanitizeFn)), t;\n    }, a._getDelegateConfig = function () {\n      var t = {};\n      if (this.config) for (var e in this.config) {\n        this.constructor.Default[e] !== this.config[e] && (t[e] = this.config[e]);\n      }\n      return t;\n    }, a._cleanTipClass = function () {\n      var t = this.getTipElement(),\n          e = t.getAttribute(\"class\").match(yt);\n      null !== e && e.length > 0 && e.map(function (t) {\n        return t.trim();\n      }).forEach(function (e) {\n        return t.classList.remove(e);\n      });\n    }, a._handlePopperPlacementChange = function (t) {\n      var e = t.state;\n      e && (this.tip = e.elements.popper, this._cleanTipClass(), this._addAttachmentClass(this._getAttachment(e.placement)));\n    }, i.jQueryInterface = function (t) {\n      return this.each(function () {\n        var e = L(this, \"bs.tooltip\"),\n            n = \"object\" == _typeof(t) && t;\n\n        if ((e || !/dispose|hide/.test(t)) && (e || (e = new i(this, n)), \"string\" == typeof t)) {\n          if (void 0 === e[t]) throw new TypeError('No method named \"' + t + '\"');\n          e[t]();\n        }\n      });\n    }, o(i, null, [{\n      key: \"Default\",\n      get: function get() {\n        return At;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return \"tooltip\";\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return \"bs.tooltip\";\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return kt;\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return \".bs.tooltip\";\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return Et;\n      }\n    }]), i;\n  }(W);\n\n  T(\"tooltip\", Lt);\n\n  var Ct = new RegExp(\"(^|\\\\s)bs-popover\\\\S+\", \"g\"),\n      Dt = s({}, Lt.Default, {\n    placement: \"right\",\n    offset: [0, 8],\n    trigger: \"click\",\n    content: \"\",\n    template: '<div class=\"popover\" role=\"tooltip\"><div class=\"popover-arrow\"></div><h3 class=\"popover-header\"></h3><div class=\"popover-body\"></div></div>'\n  }),\n      St = s({}, Lt.DefaultType, {\n    content: \"(string|element|function)\"\n  }),\n      Nt = {\n    HIDE: \"hide.bs.popover\",\n    HIDDEN: \"hidden.bs.popover\",\n    SHOW: \"show.bs.popover\",\n    SHOWN: \"shown.bs.popover\",\n    INSERTED: \"inserted.bs.popover\",\n    CLICK: \"click.bs.popover\",\n    FOCUSIN: \"focusin.bs.popover\",\n    FOCUSOUT: \"focusout.bs.popover\",\n    MOUSEENTER: \"mouseenter.bs.popover\",\n    MOUSELEAVE: \"mouseleave.bs.popover\"\n  },\n      Ot = function (t) {\n    function e() {\n      return t.apply(this, arguments) || this;\n    }\n\n    r(e, t);\n    var n = e.prototype;\n    return n.isWithContent = function () {\n      return this.getTitle() || this._getContent();\n    }, n.setContent = function () {\n      var t = this.getTipElement();\n      this.setElementContent(Q(\".popover-header\", t), this.getTitle());\n\n      var e = this._getContent();\n\n      \"function\" == typeof e && (e = e.call(this._element)), this.setElementContent(Q(\".popover-body\", t), e), t.classList.remove(\"fade\", \"show\");\n    }, n._addAttachmentClass = function (t) {\n      this.getTipElement().classList.add(\"bs-popover-\" + this.updateAttachment(t));\n    }, n._getContent = function () {\n      return this._element.getAttribute(\"data-bs-content\") || this.config.content;\n    }, n._cleanTipClass = function () {\n      var t = this.getTipElement(),\n          e = t.getAttribute(\"class\").match(Ct);\n      null !== e && e.length > 0 && e.map(function (t) {\n        return t.trim();\n      }).forEach(function (e) {\n        return t.classList.remove(e);\n      });\n    }, e.jQueryInterface = function (t) {\n      return this.each(function () {\n        var n = L(this, \"bs.popover\"),\n            i = \"object\" == _typeof(t) ? t : null;\n\n        if ((n || !/dispose|hide/.test(t)) && (n || (n = new e(this, i), k(this, \"bs.popover\", n)), \"string\" == typeof t)) {\n          if (void 0 === n[t]) throw new TypeError('No method named \"' + t + '\"');\n          n[t]();\n        }\n      });\n    }, o(e, null, [{\n      key: \"Default\",\n      get: function get() {\n        return Dt;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return \"popover\";\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return \"bs.popover\";\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return Nt;\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return \".bs.popover\";\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return St;\n      }\n    }]), e;\n  }(Lt);\n\n  T(\"popover\", Ot);\n\n  var It = {\n    offset: 10,\n    method: \"auto\",\n    target: \"\"\n  },\n      jt = {\n    offset: \"number\",\n    method: \"string\",\n    target: \"(string|element)\"\n  },\n      Pt = function (t) {\n    function e(e, n) {\n      var i;\n      return (i = t.call(this, e) || this)._scrollElement = \"BODY\" === e.tagName ? window : e, i._config = i._getConfig(n), i._selector = i._config.target + \" .nav-link, \" + i._config.target + \" .list-group-item, \" + i._config.target + \" .dropdown-item\", i._offsets = [], i._targets = [], i._activeTarget = null, i._scrollHeight = 0, K.on(i._scrollElement, \"scroll.bs.scrollspy\", function () {\n        return i._process();\n      }), i.refresh(), i._process(), i;\n    }\n\n    r(e, t);\n    var n = e.prototype;\n    return n.refresh = function () {\n      var t = this,\n          e = this._scrollElement === this._scrollElement.window ? \"offset\" : \"position\",\n          n = \"auto\" === this._config.method ? e : this._config.method,\n          i = \"position\" === n ? this._getScrollTop() : 0;\n      this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), q(this._selector).map(function (t) {\n        var e = h(t),\n            o = e ? Q(e) : null;\n\n        if (o) {\n          var s = o.getBoundingClientRect();\n          if (s.width || s.height) return [X[n](o).top + i, e];\n        }\n\n        return null;\n      }).filter(function (t) {\n        return t;\n      }).sort(function (t, e) {\n        return t[0] - e[0];\n      }).forEach(function (e) {\n        t._offsets.push(e[0]), t._targets.push(e[1]);\n      });\n    }, n.dispose = function () {\n      t.prototype.dispose.call(this), K.off(this._scrollElement, \".bs.scrollspy\"), this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;\n    }, n._getConfig = function (t) {\n      if (\"string\" != typeof (t = s({}, It, \"object\" == _typeof(t) && t ? t : {})).target && g(t.target)) {\n        var e = t.target.id;\n        e || (e = c(\"scrollspy\"), t.target.id = e), t.target = \"#\" + e;\n      }\n\n      return _(\"scrollspy\", t, jt), t;\n    }, n._getScrollTop = function () {\n      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n    }, n._getScrollHeight = function () {\n      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n    }, n._getOffsetHeight = function () {\n      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n    }, n._process = function () {\n      var t = this._getScrollTop() + this._config.offset,\n          e = this._getScrollHeight(),\n          n = this._config.offset + e - this._getOffsetHeight();\n\n      if (this._scrollHeight !== e && this.refresh(), t >= n) {\n        var i = this._targets[this._targets.length - 1];\n        this._activeTarget !== i && this._activate(i);\n      } else {\n        if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) return this._activeTarget = null, void this._clear();\n\n        for (var o = this._offsets.length; o--;) {\n          this._activeTarget !== this._targets[o] && t >= this._offsets[o] && (void 0 === this._offsets[o + 1] || t < this._offsets[o + 1]) && this._activate(this._targets[o]);\n        }\n      }\n    }, n._activate = function (t) {\n      this._activeTarget = t, this._clear();\n\n      var e = this._selector.split(\",\").map(function (e) {\n        return e + '[data-bs-target=\"' + t + '\"],' + e + '[href=\"' + t + '\"]';\n      }),\n          n = Q(e.join(\",\"));\n\n      n.classList.contains(\"dropdown-item\") ? (Q(\".dropdown-toggle\", n.closest(\".dropdown\")).classList.add(\"active\"), n.classList.add(\"active\")) : (n.classList.add(\"active\"), function (t, e) {\n        for (var n = [], i = t.parentNode; i && i.nodeType === Node.ELEMENT_NODE && 3 !== i.nodeType;) {\n          i.matches(e) && n.push(i), i = i.parentNode;\n        }\n\n        return n;\n      }(n, \".nav, .list-group\").forEach(function (t) {\n        $(t, \".nav-link, .list-group-item\").forEach(function (t) {\n          return t.classList.add(\"active\");\n        }), $(t, \".nav-item\").forEach(function (t) {\n          V(t, \".nav-link\").forEach(function (t) {\n            return t.classList.add(\"active\");\n          });\n        });\n      })), K.trigger(this._scrollElement, \"activate.bs.scrollspy\", {\n        relatedTarget: t\n      });\n    }, n._clear = function () {\n      q(this._selector).filter(function (t) {\n        return t.classList.contains(\"active\");\n      }).forEach(function (t) {\n        return t.classList.remove(\"active\");\n      });\n    }, e.jQueryInterface = function (t) {\n      return this.each(function () {\n        var n = L(this, \"bs.scrollspy\");\n\n        if (n || (n = new e(this, \"object\" == _typeof(t) && t)), \"string\" == typeof t) {\n          if (void 0 === n[t]) throw new TypeError('No method named \"' + t + '\"');\n          n[t]();\n        }\n      });\n    }, o(e, null, [{\n      key: \"Default\",\n      get: function get() {\n        return It;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return \"bs.scrollspy\";\n      }\n    }]), e;\n  }(W);\n\n  K.on(window, \"load.bs.scrollspy.data-api\", function () {\n    q('[data-bs-spy=\"scroll\"]').forEach(function (t) {\n      return new Pt(t, X.getDataAttributes(t));\n    });\n  }), T(\"scrollspy\", Pt);\n\n  var xt = function (t) {\n    function e() {\n      return t.apply(this, arguments) || this;\n    }\n\n    r(e, t);\n    var n = e.prototype;\n    return n.show = function () {\n      var t = this;\n\n      if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains(\"active\") || this._element.classList.contains(\"disabled\"))) {\n        var e,\n            n = d(this._element),\n            i = this._element.closest(\".nav, .list-group\");\n\n        if (i) {\n          var o = \"UL\" === i.nodeName || \"OL\" === i.nodeName ? \":scope > li > .active\" : \".active\";\n          e = (e = q(o, i))[e.length - 1];\n        }\n\n        var s = e ? K.trigger(e, \"hide.bs.tab\", {\n          relatedTarget: this._element\n        }) : null;\n\n        if (!(K.trigger(this._element, \"show.bs.tab\", {\n          relatedTarget: e\n        }).defaultPrevented || null !== s && s.defaultPrevented)) {\n          this._activate(this._element, i);\n\n          var r = function r() {\n            K.trigger(e, \"hidden.bs.tab\", {\n              relatedTarget: t._element\n            }), K.trigger(t._element, \"shown.bs.tab\", {\n              relatedTarget: e\n            });\n          };\n\n          n ? this._activate(n, n.parentNode, r) : r();\n        }\n      }\n    }, n._activate = function (t, e, n) {\n      var i = this,\n          o = (!e || \"UL\" !== e.nodeName && \"OL\" !== e.nodeName ? V(e, \".active\") : q(\":scope > li > .active\", e))[0],\n          s = n && o && o.classList.contains(\"fade\"),\n          r = function r() {\n        return i._transitionComplete(t, o, n);\n      };\n\n      if (o && s) {\n        var a = f(o);\n        o.classList.remove(\"show\"), K.one(o, \"transitionend\", r), m(o, a);\n      } else r();\n    }, n._transitionComplete = function (t, e, n) {\n      if (e) {\n        e.classList.remove(\"active\");\n        var i = Q(\":scope > .dropdown-menu .active\", e.parentNode);\n        i && i.classList.remove(\"active\"), \"tab\" === e.getAttribute(\"role\") && e.setAttribute(\"aria-selected\", !1);\n      }\n\n      t.classList.add(\"active\"), \"tab\" === t.getAttribute(\"role\") && t.setAttribute(\"aria-selected\", !0), y(t), t.classList.contains(\"fade\") && t.classList.add(\"show\"), t.parentNode && t.parentNode.classList.contains(\"dropdown-menu\") && (t.closest(\".dropdown\") && q(\".dropdown-toggle\").forEach(function (t) {\n        return t.classList.add(\"active\");\n      }), t.setAttribute(\"aria-expanded\", !0)), n && n();\n    }, e.jQueryInterface = function (t) {\n      return this.each(function () {\n        var n = L(this, \"bs.tab\") || new e(this);\n\n        if (\"string\" == typeof t) {\n          if (void 0 === n[t]) throw new TypeError('No method named \"' + t + '\"');\n          n[t]();\n        }\n      });\n    }, o(e, null, [{\n      key: \"DATA_KEY\",\n      get: function get() {\n        return \"bs.tab\";\n      }\n    }]), e;\n  }(W);\n\n  K.on(document, \"click.bs.tab.data-api\", '[data-bs-toggle=\"tab\"], [data-bs-toggle=\"pill\"], [data-bs-toggle=\"list\"]', function (t) {\n    t.preventDefault(), (L(this, \"bs.tab\") || new xt(this)).show();\n  }), T(\"tab\", xt);\n\n  var Ht = {\n    animation: \"boolean\",\n    autohide: \"boolean\",\n    delay: \"number\"\n  },\n      Bt = {\n    animation: !0,\n    autohide: !0,\n    delay: 5e3\n  },\n      Mt = function (t) {\n    function e(e, n) {\n      var i;\n      return (i = t.call(this, e) || this)._config = i._getConfig(n), i._timeout = null, i._setListeners(), i;\n    }\n\n    r(e, t);\n    var n = e.prototype;\n    return n.show = function () {\n      var t = this;\n\n      if (!K.trigger(this._element, \"show.bs.toast\").defaultPrevented) {\n        this._clearTimeout(), this._config.animation && this._element.classList.add(\"fade\");\n\n        var e = function e() {\n          t._element.classList.remove(\"showing\"), t._element.classList.add(\"show\"), K.trigger(t._element, \"shown.bs.toast\"), t._config.autohide && (t._timeout = setTimeout(function () {\n            t.hide();\n          }, t._config.delay));\n        };\n\n        if (this._element.classList.remove(\"hide\"), y(this._element), this._element.classList.add(\"showing\"), this._config.animation) {\n          var n = f(this._element);\n          K.one(this._element, \"transitionend\", e), m(this._element, n);\n        } else e();\n      }\n    }, n.hide = function () {\n      var t = this;\n\n      if (this._element.classList.contains(\"show\") && !K.trigger(this._element, \"hide.bs.toast\").defaultPrevented) {\n        var e = function e() {\n          t._element.classList.add(\"hide\"), K.trigger(t._element, \"hidden.bs.toast\");\n        };\n\n        if (this._element.classList.remove(\"show\"), this._config.animation) {\n          var n = f(this._element);\n          K.one(this._element, \"transitionend\", e), m(this._element, n);\n        } else e();\n      }\n    }, n.dispose = function () {\n      this._clearTimeout(), this._element.classList.contains(\"show\") && this._element.classList.remove(\"show\"), K.off(this._element, \"click.dismiss.bs.toast\"), t.prototype.dispose.call(this), this._config = null;\n    }, n._getConfig = function (t) {\n      return t = s({}, Bt, X.getDataAttributes(this._element), \"object\" == _typeof(t) && t ? t : {}), _(\"toast\", t, this.constructor.DefaultType), t;\n    }, n._setListeners = function () {\n      var t = this;\n      K.on(this._element, \"click.dismiss.bs.toast\", '[data-bs-dismiss=\"toast\"]', function () {\n        return t.hide();\n      });\n    }, n._clearTimeout = function () {\n      clearTimeout(this._timeout), this._timeout = null;\n    }, e.jQueryInterface = function (t) {\n      return this.each(function () {\n        var n = L(this, \"bs.toast\");\n\n        if (n || (n = new e(this, \"object\" == _typeof(t) && t)), \"string\" == typeof t) {\n          if (void 0 === n[t]) throw new TypeError('No method named \"' + t + '\"');\n          n[t](this);\n        }\n      });\n    }, o(e, null, [{\n      key: \"DefaultType\",\n      get: function get() {\n        return Ht;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Bt;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return \"bs.toast\";\n      }\n    }]), e;\n  }(W);\n\n  return T(\"toast\", Mt), {\n    Alert: U,\n    Button: F,\n    Carousel: J,\n    Collapse: nt,\n    Dropdown: dt,\n    Modal: gt,\n    Popover: Ot,\n    ScrollSpy: Pt,\n    Tab: xt,\n    Toast: Mt,\n    Tooltip: Lt\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/bootstrap.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/bootstrap.min.js");
/******/ 	
/******/ })()
;